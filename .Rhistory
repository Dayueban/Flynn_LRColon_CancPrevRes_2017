subs_abund_top <- subs_abund[, OTUs_sub]
subs_meta <- merge(meta_file, subs_abund_top, by.x='group', by.y="row.names")
bowel_optimized_results <- read.table(file = 'data/process/bowel_optimized.tsv', sep = '\t')
stool_optimized_results <- read.table(file = 'data/process/stool_optimized.tsv', sep = '\t')
testsubS <- subset(subs_meta, location %in% c("RS", "LS"))
testsubS$location <- factor(testsubS$location)
levels(testsubS$location) <- c(1:length(levels(testsubS$location))-1)
testsubM <- subset(subs_meta, location %in% c("RB", "LB"))
testsubM$location <- factor(testsubM$location)
levels(testsubM$location) <- c(1:length(levels(testsubM$location))-1)
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
library(randomForest)
library(AUCRF)
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
library(pROC)
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
View(testsubM)
View(bowel_optimized_results)
bowel_optimized_results <- bowel_optimized_results[-32,]
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(muc_roc, col='darkgreen', add=T, lty=1)
plot(stool_roc, col = 'purple', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Muc vs P Muc, AUC = 0.850'),
sprintf('D Lum vs P Lum, AUC = 0.580')
), lty=1, lwd=2, cex=0.7, col=c('darkgreen', 'purple'), bty='n')
mtext('B', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
bowel_optimized_results <- read.table(file = 'data/process/bowel_optimized.tsv', sep = '\t')
bowel_optimized_results <- bowel_optimized_results[-13,]
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(muc_roc, col='darkgreen', add=T, lty=1)
plot(stool_roc, col = 'purple', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Muc vs P Muc, AUC = 0.850'),
sprintf('D Lum vs P Lum, AUC = 0.580')
), lty=1, lwd=2, cex=0.7, col=c('darkgreen', 'purple'), bty='n')
mtext('B', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
bowel_optimized_results <- read.table(file = 'data/process/bowel_optimized.tsv', sep = '\t')
bowel_optimized_results <- bowel_optimized_results[-12:13,]
bowel_optimized_results <- bowel_optimized_results[-13,]
muc_roc <- roc(testsubM$location ~ bowel_optimized_results$one)
stool_roc <- roc(testsubS$location ~ stool_optimized_results$one)
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(muc_roc, col='darkgreen', add=T, lty=1)
plot(stool_roc, col = 'purple', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Muc vs P Muc, AUC = 0.850'),
sprintf('D Lum vs P Lum, AUC = 0.580')
), lty=1, lwd=2, cex=0.7, col=c('darkgreen', 'purple'), bty='n')
mtext('B', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
?auc
auc(muc_roc)
auc(stool_roc)
auc_muc <- auc(muc_roc)
auc_stool <- auc(stool_roc)
setwd("~/Documents/Impact_Vizor/Transfers")
source("Code/get_transfer_stats.R")
mBio <- get_transfer_stats("Data/mBio.txt")
mSystems <- get_transfer_stats("Data/mSystems.txt")
mlist <- as.list(c(mSystems, mBio))
library("tidyverse")
library("lubridate")
library("rAltmetric")
library("purrr")
library("magrittr")
library("stringr")
library("forcats")
#read in WoS citation data
get_citations <- function(input_citations){
read_csv(input_citations, col_names = TRUE, skip = 27) %>%
mutate(doi = tolower(DOI)) %>%
select(doi, `Total Citations`)
}
#Need tab delim files b/c of commas/semicolons w/in data
get_transfer_stats <- function(input_txt) {
read_tsv(input_txt, col_names = TRUE) %>% #import txt as tsv
mutate(Rejected = mdy(`Date of Rejection`), #coerce dates into yyyymmdd
Published = mdy(`Date of Publication`),
`Days in Transfer` = Published - Rejected,#calculate how long a transfer takes
doi = `CrossRef DOI`, #retitle doi to enable join with altmetrics data
`Reject Reason` = fct_collapse(`Reject Reason`, #Standardize decision terms
Rejected = c("Reject", "Reject: No Resubmission", "Reject - No Resubmission"),
`Editorial Rejection` = c("Editorial Reject (Reject without review)", "Reject without Review"),
`Reject & Resubmit` = c("Reject: Allow Resubmission", "Reject - Allow Resubmission"))) %>%
filter(grepl("Erratum", `Published Title`) == FALSE) %>% #filter out erratum
#grepl("Research Article", `Article Type`) == TRUE) %>% #select only research articles
select(`Days in Transfer`,`Reject Reason`, doi, `Submitted Journal`:Citations) %>%  #drop unneeded columns
gather(`Mendeley Saves`:Citations, key = Metric, value = `Citation value`)
}
mcb_transfer_stats <- get_transfer_stats("Data/mcb.txt", "Data/mcb_citations.csv")
as.list(mcb_munge$doi) %>% write.csv("mcb.doi.csv")
#For adding in citation data
get_transfer_citation_stats <- function(input_txt, input_citations_data) {
citations_data <- get_citations(input_citations_data)
read_tsv(input_txt, col_names = TRUE) %>% #import txt as tsv
mutate(Rejected = mdy(`Date of Rejection`), #coerce dates into yyyymmdd
Published = mdy(`Date of Publication`),
`Days in Transfer` = Published - Rejected,#calculate how long a transfer takes
doi = `CrossRef DOI`) %>%   #retitle doi to enable join with altmetrics data
filter(grepl("Erratum", `Published Title`) == FALSE, #filter out erratum
grepl("Research Article", `Article Type`) == TRUE) %>% #select only research articles
left_join(y = citations_data, key = doi) %>% #join WoS citation data
select(`Days in Transfer`,`Reject Reason`, doi, `Submitted Journal`:`Mendeley Saves / Month`, `Total Citations`) %>%  #drop unneeded columns
gather(`Mendeley Saves`, `Total Citations`, `Mendeley Saves / Month`, key = metric, value = `Citation value`)
}
source("Code/get_transfer_stats.R")
mBio <- get_transfer_stats("Data/mBio.txt")
mSystems <- get_transfer_stats("Data/mSystems.txt")
mlist <- as.list(c(mSystems, mBio))
install.packages('rAltmetric')
source("Code/get_transfer_stats.R")
mBio <- get_transfer_stats("Data/mBio.txt")
mSystems <- get_transfer_stats("Data/mSystems.txt")
mlist <- as.list(c(mSystems, mBio))
get_origin_plot <- function(input_data){
for (i in input_data){
ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
}
get_origin_plot(mlist)
typeof(mlist)
mlist
for (i in mlist){
ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
for (i in as.data.frame(mlist)){
ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
View(mlist)
View(mBio)
ggplot(data = mBio, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
?seq_along
for (i in mlist){
ggplot(data = mlist[i], aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
for (i in mlist){
test <- mlist[i]
ggplot(data = test, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
mlist[i]
View(mSystems)
mBio[,7] <- "mBio"
mSystems[,7] <- "mSystems"
test <- rbind(mSystems, mBio)
for (i in test$V7){
ggplot(data = test, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
for (i in test$V7){
ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
View(test)
test <- as.data.frame(test)
for (i in test$V7){
ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
for (i in test$V7){
ugly <- subset(test, test$V7 = i)
ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
for (i in test$V7){
ugly <- subset(test, test$V7 == i)
ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
}
View(ugly)
for (i in test$V7){
print(ugly <- subset(test, test$V7 == i)
ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (i in test$V7){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (i in test$V7){
#ugly <- subset(test, test$V7 == i)
print(ggplot(data = i, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
View(ugly)
ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold"))
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
View(test)
for (i in test$V7){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (unique(i) in test$V7){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
?unique
unique(test$V7)
for (unique(test$V7)){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (i in unique(test$V7)){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (i in unique(test$V7)){
ugly <- subset(test, test$V7 == i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
unique(test$V7)
View(ugly)
for (i in unique(test$V7)){
ugly <- subset(test, test$V7 == i)
print(i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
for (i in unique(test$V7)){
ugly <- subset(test, test$V7 == i)
print(i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
get_origin_plot <- function(input_data){
for (i in unique(input_data$V7)){
ugly <- subset(input_data, input_data$V7 == i)
print(i)
print(ggplot(data = ugly, aes_string(x="`Submitted Journal`", y="`Reject Reason`")) +
geom_count() +
labs(title= "Origin of Transfers") +
theme_classic() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=16,face="bold")))
}
}
get_origin_plot(test)
testsubR <- subset(subs_meta, location %in% c("RB", "RS"))
testsubR$location <- factor(testsubR$location)
levels(testsubR$location) <- c(1:length(levels(testsubR$location))-1)
right_roc <- roc(testsubR$location ~ right_optimized_results$one)
right_optimized_results <- read.table(file = 'data/process/right_optimized.tsv', sep = '\t')
setwd("~/Documents/Flynn_LRColon_XXXX_2017")
right_optimized_results <- read.table(file = 'data/process/right_optimized.tsv', sep = '\t')
testsubR <- subset(subs_meta, location %in% c("RB", "RS"))
testsubR$location <- factor(testsubR$location)
levels(testsubR$location) <- c(1:length(levels(testsubR$location))-1)
testsubL <- subset(subs_meta, location %in% c("LB", "LS"))
testsubL$location <- factor(testsubL$location)
levels(testsubL$location) <- c(1:length(levels(testsubL$location))-1)
right_roc <- roc(testsubR$location ~ right_optimized_results$one)
left_roc <- roc(testsub$location ~ left_optimized_results$one)
right_roc <- roc(testsubR$location ~ right_optimized_results$one)
left_roc <- roc(testsubL$location ~ left_optimized_results$one)
right_roc <- roc(testsubR$location ~ right_optimized_results$one)
left_optimized_results <- read.table(file = 'data/process/left_optimized.tsv', sep = '\t')
left_roc <- roc(testsubL$location ~ left_optimized_results$one)
right_roc <- roc(testsubR$location ~ right_optimized_results$one)
auc_right <- auc(right_roc)
auc_right
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(left_roc, col='red', add=T, lty=1)
plot(right_roc, col = 'blue', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Lum vs D Muc, AUC = 0.908'),
sprintf('P Lum vs P Muc, AUC = 0.716')
),lty=1, lwd = 2, cex=0.7, col=c('red', 'blue'), bty='n')
?optimalset
?OptimalSet
r_top_otus <- read.table(file='data/process/r_imp_otus.tsv')
r_top_names <- colnames(r_top_otus[2:6])
r_top_labels <- get_tax(1, r_top_names, tax_file)
rs_abunds <- shared_meta[shared_meta$location=='RS', r_top_names]/10000 + 1e-4
rb_abunds <- shared_meta[shared_meta$location=='RB', r_top_names]/10000 + 1e-4
source('code/random_functions.R')
source('code/tax_level.R')
#f
r_top_otus <- read.table(file='data/process/r_imp_otus.tsv')
r_top_names <- colnames(r_top_otus[2:6])
r_top_labels <- get_tax(1, r_top_names, tax_file)
rs_abunds <- shared_meta[shared_meta$location=='RS', r_top_names]/10000 + 1e-4
rb_abunds <- shared_meta[shared_meta$location=='RB', r_top_names]/10000 + 1e-4
par(mar=c(5, 15, 1, 1))
plot(1, type="n", ylim=c(0,length(r_top_otus)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n", cex.lab=1.5)
index <- 1
for(i in r_top_otus){
stripchart(at=index-0.35, jitter(rs_abunds[,i], amount=1e-5), pch=21, bg="purple", method="jitter", jitter=0.2, add=T, cex=1.2, lwd=0.5)
stripchart(at=index+0.35, jitter(rb_abunds[,i], amount=1e-5), pch=21, bg="orange", method="jitter", jitter=0.2, add=T, cex=1.2, lwd=0.5)
segments(median(rs_abunds[,i]),index-0.7,median(rs_abunds[,i]),index, lwd=3)
segments(median(rb_abunds[,i]),index+0.7,median(rb_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=r_top_labels$tax_label, las=1, line=-0.5, tick=F, cex.axis=1.2)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"), cex.axis=1.2)
legend('topright', legend=c("Right mucosa", "Right lumen"), pch=c(21, 21), pt.bg=c("orange","purple"), cex=1.2)
aucrf_data_left_bs <- auc_loc(subs_meta, "LB", "LS")
seed <- 1
n_trees <- 2001
aucrf_data_left_bs <- auc_loc(subs_meta, "LB", "LS")
aucrf_data_LRbowel <- auc_loc(subs_meta, "LB", "RB")
aucrf_data_right_bs <- auc_loc(subs_meta, "RB", "RS")
aucrf_data_LRlumen <- auc_loc(subs_meta, "LS", "RS")
right_otu_feat <- colnames(aucrf_data_right_bs[2:6])
otu_taxa_right <- get_tax(1, right_otu_feat, tax_file)
otu_taxa_right <- separate(otu_taxa_right, tax_label, into = c("OTU", "otu_num"), sep = "\\(")
formatted4 <- lapply(1:nrow(otu_taxa_right), function(i) bquote(paste(italic(.(otu_taxa_right$OTU[i])), "(", .(otu_taxa_right$otu_num[i]), sep=" ")))
#Abundance stripchart or most predictive otus
rs_abunds <- shared_meta[shared_meta$location=='RS', right_otu_feat]/10000 + 1e-4
rb_abunds <- shared_meta[shared_meta$location=='RB', right_otu_feat]/10000 + 1e-4
par(mar=c(5, 11, 1, 1))
plot(1, type="n", ylim=c(0,length(right_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in right_otu_feat){
stripchart(at=index-0.35, jitter(rs_abunds[,i], amount=1e-5), pch=21, bg="white", method="jitter", jitter=0.2, add=T, lwd=0.5)
stripchart(at=index+0.35, jitter(rb_abunds[,i], amount=1e-5), pch=21, bg="gray29", method="jitter", jitter=0.2, add=T, lwd=0.5)
segments(median(rs_abunds[,i]),index-0.8,median(rs_abunds[,i]),index, lwd=3)
segments(median(rb_abunds[,i]),index+0.8,median(rb_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=do.call(expression,formatted4), las=1, line=-0.5, tick=F, cex.axis=0.9)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("P Muc", "P Lum"), pch=c(21, 21), pt.bg=c("gray29","white"), cex=0.7)
mtext('A', side=2, line=7.5, las=1, adj=2, padj=-4.5, cex=2, font=2)
left_optimized_results <- read.table(file = 'data/process/left_optimized.tsv', sep = '\t')
left_roc <- roc(testsubL$location ~ left_optimized_results$one)
auc_left <- auc(left_roc)
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(left_roc, col='red', add=T, lty=1)
plot(right_roc, col = 'blue', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Lum vs D Muc, AUC = 0.908'),
sprintf('P Lum vs P Muc, AUC = 0.716')
),lty=1, lwd = 2, cex=0.7, col=c('red', 'blue'), bty='n')
mtext('A', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
auc_left
auc_right
auc_muc
auc_stool
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(muc_roc, col='darkgreen', add=T, lty=1)
plot(stool_roc, col = 'purple', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Muc vs P Muc, AUC = 0.808'),
sprintf('D Lum vs P Lum, AUC = 0.599')
), lty=1, lwd=2, cex=0.7, col=c('darkgreen', 'purple'), bty='n')
mtext('B', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
View(aucrf_data_left_bs)
?round
round(auc_muc, digits=3)
round(auc_stool, digits=3)
subs_file <- read.table(file='data/mothur/kws_final.an.0.03.subsample.shared', sep = '\t', header = T, row.names=2)
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figure_4.pdf'
pdf(file=plot_file, width=4, height=6)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
#plots for figures
#Left and right plot
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(left_roc, col='red', add=T, lty=1)
plot(right_roc, col = 'blue', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Lum vs D Muc, AUC = 0.863'),
sprintf('P Lum vs P Muc, AUC = 0.716')
),lty=1, lwd = 2, cex=0.7, col=c('red', 'blue'), bty='n')
mtext('A', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
#stool and mucosa plot
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
plot(muc_roc, col='darkgreen', add=T, lty=1)
plot(stool_roc, col = 'purple', add=T, lty=1)
mtext(side=2, text="Sensitivity", line=2.5)
mtext(side=1, text="Specificity", line=2.5)
legend('bottomright', legend=c(
sprintf('D Muc vs P Muc, AUC = 0.808'),
sprintf('D Lum vs P Lum, AUC = 0.599')
), lty=1, lwd=2, cex=0.7, col=c('darkgreen', 'purple'), bty='n')
mtext('B', side=2, line=2, las=1, adj=1.5, padj=-5, cex=1.5, font=2)
dev.off()
