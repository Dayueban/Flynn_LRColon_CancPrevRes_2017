ggplot(alltyc, aes(x=as.factor(same_pt), y=thetayc)) + geom_jitter(width=0.15, shape=21, size=3, fill='grey', col='black') + theme_bw()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text = element_text(size= 16), axis.title= element_text(size=18)) +
scale_x_discrete(labels=c("interpersonal", "intrapersonal")) +
theme(axis.title.x=element_blank()) +ylab("ThetaYC distance")+
stat_summary(aes(x=as.factor(same_pt), y=thetayc), data = alltyc, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.3, col = "black")
ggplot(alltyc, aes(x=as.factor(same_pt), y=thetayc)) + geom_jitter(width=0.15, shape=21, size=3, fill='grey', col='black') + theme_bw()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text = element_text(size= 16), axis.title= element_text(size=18)) +
scale_x_discrete(labels=c("interpersonal", "intrapersonal")) +
theme(axis.title.x=element_blank()) +ylab("ThetaYC distance")+
stat_summary(aes(x=as.factor(same_pt), y=thetayc), data = alltyc, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.4, col = "black")
ggplot(alltyc, aes(x=as.factor(same_pt), y=thetayc)) + geom_jitter(width=0.15, shape=21, size=3, fill='grey', col='black') + theme_bw()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text = element_text(size= 16), axis.title= element_text(size=18)) +
scale_x_discrete(labels=c("interpersonal", "intrapersonal")) +
theme(axis.title.x=element_blank()) +ylab("ThetaYC distance")+
stat_summary(aes(x=as.factor(same_pt), y=thetayc), data = alltyc, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.4, col = "black")
meta <- 'data/raw/kws_metadata.tsv'
shared <- 'data/mothur/kws_final.an.shared'
tax <- 'data/mothur/kws_final.an.cons.taxonomy'
subsample <- 'data/mothur/kws_final.an.0.03.subsample.shared'
meta_file <- read.table(file='data/raw/kws_metadata.tsv', header = T)
shared_file <- read.table(file='data/mothur/kws_final.an.shared', sep = '\t', header=T, row.names=2)
tax_file <- read.table(file='data/mothur/kws_final.an.cons.taxonomy', sep = '\t', header=T, row.names=1)
shared_meta <- merge(meta_file, shared_file, by.x='group', by.y='row.names')
#make OTU abundance file
#remove numOTUs column
#Create df with relative abundances
test <- subset(shared_file, select = -c(numOtus, label))
rel_abund <- 100*test/unique(apply(test, 1, sum)) #unique is bad
#Create vector of OTUs with median abundances >1%
OTUs_1 <- apply(rel_abund, 2, max) > 1
OTU_list <- colnames(rel_abund)[OTUs_1]
#get df of just top OTUs
rel_abund_top <- rel_abund[, OTUs_1]
rel_meta <- merge(meta_file, rel_abund_top, by.x='group', by.y="row.names")
shared_phyla <- get_tax_level_shared(subsample, tax, 2)
phyla_met <- merge(meta_file, shared_phyla, by.x='group', by.y='row.names')
View(shared_phyla)
source('code/Sum_OTU_by_Tax.R')
source('code/sum_shared.R')
#use this code to assign phyla to each OTU in the shared file
shared_phyla <- get_tax_level_shared(subsample, tax, 2)
phyla_met <- merge(meta_file, shared_phyla, by.x='group', by.y='row.names')
#try to get the df organized to work as a boxplot - no median calculation
phyla_test <- phyla_met[, c("location","Firmicutes","Bacteroidetes","Proteobacteria","Verrucomicrobia","Actinobacteria","Fusobacteria")]
subsampled_to <- 4231
RA <- function(x) 100*x/subsampled_to
phyla_RA <- data.frame(phyla_test[1], apply(phyla_test[2:ncol(phyla_test)],2, RA))
phylaRAnames <- colnames(phyla_RA[,1:7])
phyla_RAmelt <- melt(phyla_RA[, phylaRAnames], id.vars=1)
#for boxplot version
positions <- c("RB", "RS", "LB", "LS", "SS")
ggplot(phyla_RAmelt, aes(x=location, y=value)) + geom_boxplot(aes(color=variable)) +
scale_color_discrete(guide=FALSE)+
geom_boxplot(aes(fill=variable), outlier.shape=21, outlier.size=2.5) + theme_bw() +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=16)) +
scale_x_discrete(limits = positions, breaks=positions,
labels=c("R Mucosa", "R Lumen", "L Mucosa", "L Lumen", "Stool")) +
theme(axis.title.x=element_blank(), panel.grid.major.x = element_blank(),panel.grid.minor.x = element_blank()) +
theme(legend.justification = c(1, 1), legend.position = c(1, 1)) + scale_fill_brewer(palette="Dark2", name="Phylum") +
ylab("% Relative Abundance")
ggplot(phyla_RAmelt, aes(x=location, y=value)) + geom_boxplot(aes(color=variable)) +
scale_color_discrete(guide=FALSE)+
geom_boxplot(aes(fill=variable), outlier.shape=21, outlier.size=2.5) + theme_bw() +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=16)) +
scale_x_discrete(limits = positions, breaks=positions,
labels=c("R Mucosa", "R Lumen", "L Mucosa", "L Lumen", "Stool")) +
theme(axis.title.x=element_blank(), panel.grid.major.x = element_blank(),panel.grid.minor.x = element_blank()) +
theme(legend.justification = c(0.9, 0.9), legend.position = c(0.9, 0.9)) + scale_fill_brewer(palette="Dark2", name="Phylum") +
ylab("% Relative Abundance")
ggplot(phyla_RAmelt, aes(x=location, y=value)) + geom_boxplot(aes(color=variable)) +
scale_color_discrete(guide=FALSE)+
geom_boxplot(aes(fill=variable), outlier.shape=21, outlier.size=2.5) + theme_bw() +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=16)) +
scale_x_discrete(limits = positions, breaks=positions,
labels=c("R Mucosa", "R Lumen", "L Mucosa", "L Lumen", "Stool")) +
theme(axis.title.x=element_blank(), panel.grid.major.x = element_blank(),panel.grid.minor.x = element_blank()) +
theme(legend.justification = c(0.999, 0.999), legend.position = c(0.999, 0.999)) + scale_fill_brewer(palette="Dark2", name="Phylum") +
ylab("% Relative Abundance")
simps <- read.table(file='data/mothur/kws_final.an.groups.summary', header = T)
View(simps)
simpmeta <- merge(meta_file, simps)
simpmeta$location <- factor(simpmeta$location, c("LB","RB", "LS", "RS", "SS"))
ggplot(simpmeta, aes(x=location, y=invsimpson, group =1)) +geom_point() +geom_jitter(width=0.2) +
theme_bw() + ylab("Inverse Simpson Diversity") +
scale_x_discrete(labels=c("L Mucosa", "R Mucosa", "L Lumen", "R Lumen", "Stool")) +
theme(legend.position='none', axis.title.x=element_blank()) +
stat_summary(aes(x=location, y=invsimpson), data = simpmeta, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.4) +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18))
simp_plot <- ggplot(simpmeta, aes(x=location, y=invsimpson, group =1)) +geom_point() +geom_jitter(width=0.2) +
theme_bw() + ylab("Inverse Simpson Diversity") +
scale_x_discrete(labels=c("L Mucosa", "R Mucosa", "L Lumen", "R Lumen", "Stool")) +
theme(legend.position='none', axis.title.x=element_blank()) +
stat_summary(aes(x=location, y=invsimpson), data = simpmeta, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.4) +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18))
simp_plot
phy_plot <- ggplot(phyla_RAmelt, aes(x=location, y=value)) + geom_boxplot(aes(color=variable)) +
scale_color_discrete(guide=FALSE)+
geom_boxplot(aes(fill=variable), outlier.shape=21, outlier.size=2.5) + theme_bw() +
theme(axis.text = element_text(size= 16), axis.title= element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=16)) +
scale_x_discrete(limits = positions, breaks=positions,
labels=c("R Mucosa", "R Lumen", "L Mucosa", "L Lumen", "Stool")) +
theme(axis.title.x=element_blank(), panel.grid.major.x = element_blank(),panel.grid.minor.x = element_blank()) +
theme(legend.justification = c(0.999, 0.999), legend.position = c(0.999, 0.999)) + scale_fill_brewer(palette="Dark2", name="Phylum") +
ylab("% Relative Abundance")
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/results/figures/figure_2.pdf'
pdf(file=plot_file, width=11, height=9)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figures/figure_2.pdf'
pdf(file=plot_file, width=11, height=9)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figure_2.pdf'
pdf(file=plot_file, width=11, height=9)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figure_2.pdf'
pdf(file=plot_file, width=11, height=8)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figure_2.pdf'
pdf(file=plot_file, width=12, height=7)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
positions <- c("RB", "RS", "LB", "LS", "SS")
simp_plot <- ggplot(simpmeta, aes(x=location, y=invsimpson, group =1)) +geom_point() +geom_jitter(width=0.2) +theme_bw() + ylab("Inverse Simpson Diversity") +
scale_x_discrete(limits = positions, breaks=positions,
labels=c("R Mucosa", "R Lumen", "L Mucosa", "L Lumen", "Stool")) +
theme(legend.position='none', axis.title.x=element_blank(), axis.text = element_text(size= 16), axis.title= element_text(size=18)) +
stat_summary(aes(x=location, y=invsimpson), data = simpmeta, fun.y=median, fun.ymin=median, fun.ymax=median, geom="crossbar", width=0.4)
plot_file <- '~/Documents/Flynn_LRColon_XXXX_2017/submission/figure_2.pdf'
pdf(file=plot_file, width=12, height=7)
layout(matrix(c(1,
2),
nrow=2, byrow = TRUE))
phy_plot
simp_plot
dev.off()
View(tyc)
tyc <- separate(tyc, label, into= c('pt1', 'samp1'), sep="-", remove=F)
tyc <- separate(tyc, comparison, into= c('pt2', 'samp2'), sep="-", remove=F)
tyc <- tyc[-"row.names"]
tyc <- separate(tyc, label, into= c('pt1', 'samp1'), sep="-", remove=F)
tyc <- separate(tyc, comparison, into= c('pt2', 'samp2'), sep="-", remove=F)
tyc <- subset(tyc, -c("row.names", "X"))
tyc <- subset(tyc, -c(row.names, X))
tyc <- subset(tyc, select = -c("row.names", "X"))
tyc <- subset(tyc, select = -c(row.names, X))
tyc <- read.table("data/mothur/kws_final.an.summary", sep = '\t', header = T, row.names=NULL)
tyc <- separate(tyc, label, into= c('pt1', 'samp1'), sep="-", remove=F)
tyc <- separate(tyc, comparison, into= c('pt2', 'samp2'), sep="-", remove=F)
tyc <- subset(tyc, select = -c(row.names, X))
getwd
getwd()
setwd("~/Documents/Flynn_LRColon_XXXX_2017")
getwd()
#setwd("~/Users/kaitlinflynn/Documents/Flynn_LRColon_XXXX_2017")
meta <- '../data/raw/kws_metadata.tsv'
shared <- '../data/mothur/kws_final.an.shared'
tax <- '../data/mothur/kws_final.an.cons.taxonomy'
subsample <- '../data/mothur/kws_final.an.0.03.subsample.shared'
meta_file <- read.table(file='../data/raw/kws_metadata.tsv', header = T)
shared_file <- read.table(file='../data/mothur/kws_final.an.shared', sep = '\t', header=T, row.names=2)
tax_file <- read.table(file='../data/mothur/kws_final.an.cons.taxonomy', sep = '\t', header=T, row.names=1)
shared_meta <- merge(meta_file, shared_file, by.x='group', by.y='row.names')
simps <- read.table(file='../data/mothur/kws_final.an.groups.summary', header = T)
simpmeta <- merge(meta_file, simps)
tyc <- read.table("../mothur/kws_final.an.summary", sep = '\t', header = T, row.names=NULL)
source('../Flynn_LRColon_XXXX_2017/code/Sum_OTU_by_Tax.R')
subsampled_meta <- merge(meta_file, subsample, by.x='group', by.y='row.names')
subsampled_file <- read.table(file='data/mothur/kws_final.an.0.03.subsample.shared', sep = '\t', header=T, row.names=2)
subsampled_meta <- merge(meta_file, subsampled_file, by.x='group', by.y='row.names')
fuso179 <- subsampled_meta[, colnames(subsampled_meta) %in% c("group", "patient", "location", "Otu00179")]
fuso179[,5] <- (fuso179[,4]/4321)*100
names(fuso179)[5] <- "Otu00179_relAbund"
ggplot(fuso179, aes(x=location, y=Otu00179_relAbund)) +geom_point() +theme_bw()
p_asach <- shared_meta[, colnames(shared_meta) %in% c("Group", "patient", "location", "Otu00152")]
p_asach[,4] <- (p_asach[,3]/4321) *100
names(p_asach)[4] <- "Otu00152_abund"
p_152 <-subsampled_meta[, colnames(shared_meta) %in% c("Group", "patient", "location", "Otu00152")]
p_152[,4] <- (p_152[,3]/4321) *100
names(p_152)[4] <- "Otu152_abund"
ggplot(p_152, aes(x=location, y=Otu00152_abund)) +geom_point() +theme_bw()
ggplot(p_152, aes(x=location, y=Otu152_abund)) +geom_point() +theme_bw()
p_asach <- shared_meta[, colnames(shared_meta) %in% c("Group", "patient", "location", "Otu00152")]
p_asach[,4] <- (p_asach[,3]/4321) *100
names(p_asach)[4] <- "Otu00152_abund"
ggplot(p_asach, aes(x=location, y=Otu00152_abund)) +geom_jitter() +theme_bw()
ggplot(p_asach, aes(x=location, y=Otu00152_abund)) +geom_point() +theme_bw()
ggplot(p_152, aes(x=location, y=Otu152_abund)) +geom_jitter() +theme_bw()
ggplot(fuso179, aes(x=location, y=Otu00179_relAbund)) +geom_point() +theme_bw()
ggplot(fuso179, aes(x=location, y=Otu00179_relAbund)) +geom_jitter() +theme_bw()
ggplot(fuso179, aes(x=location, y=Otu00179_relAbund)) +geom_jitter(width=0.3) +theme_bw()
fuso179 <- subsampled_meta[, colnames(subsampled_meta) %in% c("group", "patient", "location", "Otu00179")]
fuso179[,5] <- (fuso179[,4]/subsampled_to)*100
names(fuso179)[5] <- "Otu00179_relAbund"
p_152 <-subsampled_meta[, colnames(shared_meta) %in% c("Group", "patient", "location", "Otu00152")]
p_152[,4] <- (p_152[,3]/subsampled_to) *100
names(p_152)[4] <- "Otu152_abund"
pack_used <- c('randomForest','ggplot2', 'pROC', 'knitr','dplyr','AUCRF', 'tidyr', 'caret', 'RColorBrewer', 'reshape2', 'wesanderson')
for (dep in pack_used){
if (dep %in% installed.packages()[,"Package"] == FALSE){
install.packages(as.character(dep), repos = 'http://cran.us.r-project.org',
quiet=TRUE);
}
library(dep, verbose=FALSE, character.only=TRUE)
}
meta <- '../data/raw/kws_metadata.tsv'
shared <- '../data/mothur/kws_final.an.shared'
tax <- '../data/mothur/kws_final.an.cons.taxonomy'
subsample <- '../data/mothur/kws_final.an.0.03.subsample.shared'
meta_file <- read.table(file='../data/raw/kws_metadata.tsv', header = T)
shared_file <- read.table(file='../data/mothur/kws_final.an.shared', sep = '\t', header=T, row.names=2)
tax_file <- read.table(file='../data/mothur/kws_final.an.cons.taxonomy', sep = '\t', header=T, row.names=1)
shared_meta <- merge(meta_file, shared_file, by.x='group', by.y='row.names')
subsampled_meta <- merge(meta_file, subsample, by.x='group', by.y='row.names')
simps <- read.table(file='../data/mothur/kws_final.an.groups.summary', header = T)
simpmeta <- merge(meta_file, simps)
tyc <- read.table("../data/mothur/kws_final.an.summary", sep = '\t', header = T, row.names=NULL)
source('../code/Sum_OTU_by_Tax.R')
source('../code/sum_shared.R')
#use this code to assign phyla to each OTU in the shared file
shared_phyla <- get_tax_level_shared(subsample, tax, 2)
phyla_met <- merge(meta_file, shared_phyla, by.x='group', by.y='row.names')
#try to get the df organized to work as a boxplot - no median calculation
phyla_test <- phyla_met[, c("location","Firmicutes","Bacteroidetes","Proteobacteria","Verrucomicrobia","Actinobacteria","Fusobacteria")]
subsampled_to <- 4231
RA <- function(x) 100*x/subsampled_to
phyla_RA <- data.frame(phyla_test[1], apply(phyla_test[2:ncol(phyla_test)],2, RA))
phylaRAnames <- colnames(phyla_RA[,1:7])
phyla_RAmelt <- melt(phyla_RA[, phylaRAnames], id.vars=1)
tyc <- read.table("../data/mothur/kws_final.an.summary", sep = '\t', header = T, row.names=NULL)
#separate column values for comparisons
tyc <- separate(tyc, label, into= c('pt1', 'samp1'), sep="-", remove=F)
tyc <- separate(tyc, comparison, into= c('pt2', 'samp2'), sep="-", remove=F)
tyc <- subset(tyc, select = -c(row.names, X))
tyc <- subset(tyc, pt1==pt2)
tyc <- unite_(tyc, "match", from=c('samp1', 'samp2'), sep="_", remove = F)
stooltyc <- subset(tyc, match=='LB_RB' | match== 'LS_RS')
leftandrighttyc <- subset(tyc, match=='LB_LS' | match== 'RB_RS')
lvsr <- rbind(stooltyc, leftandrighttyc)
exittyc <- subset(tyc, samp2 == 'SS')
pvalues <- c()
Atyc <- subset(tyc, match=='RB_RS' | match=='LS_RS')
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=Atyc, paired=T)$p.value)
btyc <- subset(tyc, match=='RB_RS'| match=='LB_RB')
btyc <- btyc[-25,]
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=btyc, paired=T)$p.value)
ctyc <- subset(tyc, match=='RB_RS'| match=='LB_LS')
ctyc <- ctyc[-25,]
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=ctyc, paired=T)$p.value)
dtyc <- subset(tyc, match == 'LS_RS' | match == 'LB_RB')
dtyc <- dtyc[-25,]
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=dtyc, paired=T)$p.value)
etyc <- subset(tyc, match == 'LS_RS' | match == 'LB_LS')
etyc <- etyc[-25,]
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=etyc, paired=T)$p.value)
ftyc <- subset(tyc, match == 'LB_RB' | match == 'LB_LS')
pvalues <- c(pvalues, wilcox.test(thetayc~match, data=ftyc, paired=T)$p.value)
pvalues <- p.adjust(pvalues, method = "BH")
# now for exit comparisons
stoolpvalues <- c()
htyc <- subset(tyc, match=='RB_SS' | match=='RS_SS')
htyc <- htyc[-25,]
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=htyc, paired=T)$p.value)
ityc <- subset(tyc, match=='RB_SS' | match=='LB_SS')
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=ityc, paired=T)$p.value)
jtyc <- subset(tyc, match=='RB_SS' | match=='LS_SS')
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=jtyc, paired=T)$p.value)
ktyc <- subset(tyc, match=='RS_SS' | match=='LB_SS')
ktyc <- ktyc[-25,]
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=ktyc, paired=T)$p.value)
ltyc <- subset(tyc, match=='RS_SS' | match=='LS_SS')
ltyc <- ltyc[-25,]
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=ltyc, paired=T)$p.value)
mtyc <- subset(tyc, match=='LB_SS' | match=='LS_SS')
stoolpvalues <- c(stoolpvalues, wilcox.test(thetayc~match, data=mtyc, paired=T)$p.value)
stoolpvalues <- p.adjust(stoolpvalues, method = "BH")
alltyc <- read.table("../data/process/allshared.summary", sep = '\t', header = T, row.names=NULL)
alltyc <- separate(alltyc, label, into= c('pt1', 'samp1'), sep="-", remove=F)
alltyc <- separate(alltyc, comparison, into= c('pt2', 'samp2'), sep="-", remove=F)
alltyc <- alltyc[-1]
alltyc <- alltyc[-7]
#ultimately want a plot of all points where pt1 == pt2 in one bar and all of the others in another column
#unite and make column of 0/1 for matches? then can plot 1 and 0s
#should i separate out lumen and mucosa ? sure or no not for now
alltyc["same_pt"] <- NA
for (i in 1:nrow(alltyc)){
if (alltyc$pt1[i] == alltyc$pt2[i]){
alltyc$same_pt[i] <- 1
}
else alltyc$same_pt[i] <- 0
}
inter_medians <- aggregate(thetayc ~ same_pt, alltyc, median)
#create dataframe with relative abundances
rel_abund <- 100*shared_file/unique(apply(shared_file, 1, sum))
#Create vector of OTUs with median abundances >1%
OTUs_1 <- apply(rel_abund, 2, max) > 1
OTU_list <- colnames(rel_abund)[OTUs_1]
#get df of just top OTUs
rel_abund_top <- rel_abund[, OTUs_1]
rel_meta <- merge(meta_file, rel_abund_top, by.x='group', by.y="row.names")
seed <- 1
n_trees <- 2001
source('../code/random_functions.R')
#####RandomForest###########################################################################################
#build randomForest model for each location comparison using randomize_loc function
rf_left <- randomize_loc(rel_meta, "LB", "LS") #OOB 10.26%
rf_right <- randomize_loc(rel_meta, "RB", "RS") #OOB 53%
rf_bowel <- randomize_loc(rel_meta, "LB", "RB") #OOB 25.64%
rf_lumen <- randomize_loc(rel_meta, "LS", "RS") #OOB 69.23%
#and for each site
rf_all <- randomize_site(rel_meta, "mucosa", "stool")
#####AUCRF#####################################################################################
# create RF model with AUCRF outputs top OTUs
aucrf_data_left_bs <- auc_loc(rel_meta, "LB", "LS")
aucrf_data_LRbowel <- auc_loc(rel_meta, "LB", "RB")
aucrf_data_right_bs <- auc_loc(rel_meta, "RB", "RS")
aucrf_data_LRlumen <- auc_loc(rel_meta, "LS", "RS")
aucrf_data_allum <- auc_site(rel_meta, "mucosa", "stool")
########Cross-Validation#################################################################
#10 fold cross validation for all lumen vs mucosa
iters <- 100
cv10f_aucs <- c()
cv10f_all_resp <- c()
cv10f_all_pred <- c()
for(j in 1:iters){
set.seed(j)
sampling <- sample(1:nrow(aucrf_data_allum),nrow(aucrf_data_allum),replace=F)
cv10f_probs <- rep(NA,78)
for(i in seq(1,77,7)){
train <- aucrf_data_allum[sampling[-(i:(i+6))],]
test <- aucrf_data_allum[sampling[i:(i+6)],]
set.seed(seed)
temp_model <- AUCRF(site~., data=train, pdel=0.99, ntree=500)
cv10f_probs[sampling[i:(i+6)]] <- predict(temp_model$RFopt, test, type='prob')[,2]
}
cv10f_roc <- roc(aucrf_data_allum$site~cv10f_probs)
cv10f_all_pred <- c(cv10f_all_pred, cv10f_probs)
cv10f_all_resp <- c(cv10f_all_resp, aucrf_data_allum$site)
cv10f_aucs[j] <- cv10f_roc$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc <- roc(cv10f_all_resp~cv10f_all_pred)
#10fold CV for L lumen vs L mucosa
iters <- 100
cv10f_aucs <- c()
cv10f_all_resp_left_bs <- c()
cv10f_all_pred_left_bs <- c()
for(j in 1:iters){
set.seed(j)
sampling <- sample(1:nrow(aucrf_data_left_bs),nrow(aucrf_data_left_bs),replace=F)
cv10f_probs <- rep(NA,39)
for(i in seq(1,36,4)){
train_left_bs <- aucrf_data_left_bs[sampling[-(i:(i+3))],]
test_left_bs <- aucrf_data_left_bs[sampling[i:(i+3)],]
set.seed(seed)
temp_model_left_bs <- AUCRF(location~., data=train_left_bs, pdel=0.99, ntree=500)
cv10f_probs[sampling[i:(i+3)]] <- predict(temp_model_left_bs$RFopt, test_left_bs, type='prob')[,2]
}
cv10f_roc_left_bs <- roc(aucrf_data_left_bs$location~cv10f_probs)
cv10f_all_pred_left_bs <- c(cv10f_all_pred_left_bs, cv10f_probs)
cv10f_all_resp_left_bs <- c(cv10f_all_resp_left_bs, aucrf_data_left_bs$location)
cv10f_aucs[j] <- cv10f_roc_left_bs$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc_left_bs <- roc(cv10f_all_resp_left_bs~cv10f_all_pred_left_bs)
#10fold CV for R lumen vs R mucosa
iters <- 100
cv10f_aucs <- c()
cv10f_all_resp_right_bs <- c()
cv10f_all_pred_right_bs <- c()
for(j in 1:iters){
set.seed(j)
sampling <- sample(1:nrow(aucrf_data_right_bs),nrow(aucrf_data_right_bs),replace=F)
cv10f_probs <- rep(NA,39)
for(i in seq(1,36,4)){
train_right_bs <- aucrf_data_right_bs[sampling[-(i:(i+3))],]
test_right_bs <- aucrf_data_right_bs[sampling[i:(i+3)],]
set.seed(seed)
temp_model_right_bs <- AUCRF(location~., data=train_right_bs, pdel=0.99, ntree=500)
cv10f_probs[sampling[i:(i+3)]] <- predict(temp_model_right_bs$RFopt, test_right_bs, type='prob')[,2]
}
cv10f_roc_right_bs <- roc(aucrf_data_right_bs$location~cv10f_probs)
cv10f_all_pred_right_bs <- c(cv10f_all_pred_right_bs, cv10f_probs)
cv10f_all_resp_right_bs <- c(cv10f_all_resp_right_bs, aucrf_data_right_bs$location)
cv10f_aucs[j] <- cv10f_roc_right_bs$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc_right_bs <- roc(cv10f_all_resp_right_bs~cv10f_all_pred_right_bs)
#10 fold cross validation for L vs R mucosa
iters <- 100
cv10f_aucs_muc <- c()
cv10f_all_resp_muc <- c()
cv10f_all_pred_muc <- c()
for(j in 1:iters){
set.seed(j)
sampling_muc <- sample(1:nrow(aucrf_data_LRbowel),nrow(aucrf_data_LRbowel),replace=F)
cv10f_probs_muc <- rep(NA,39)
for(i in seq(1,36,4)){
train_muc <- aucrf_data_LRbowel[sampling_muc[-(i:(i+3))],]
test_muc <- aucrf_data_LRbowel[sampling_muc[i:(i+3)],]
set.seed(seed)
temp_model_muc <- AUCRF(location~., data=train_muc, pdel=0.99, ntree=500)
cv10f_probs_muc[sampling_muc[i:(i+3)]] <- predict(temp_model_muc$RFopt, test_muc, type='prob')[,2]
}
cv10f_roc_muc <- roc(aucrf_data_LRbowel$location~cv10f_probs_muc)
cv10f_all_pred_muc <- c(cv10f_all_pred_muc, cv10f_probs_muc)
cv10f_all_resp_muc <- c(cv10f_all_resp_muc, aucrf_data_LRbowel$location)
cv10f_aucs_muc[j] <- cv10f_roc_muc$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc_muc <- roc(cv10f_all_resp_muc~cv10f_all_pred_muc)
#10 fold cross validation for L vs R lumen
iters <- 100
cv10f_aucs_lum <- c()
cv10f_all_resp_lum <- c()
cv10f_all_pred_lum <- c()
for(j in 1:iters){
set.seed(j)
sampling_lum <- sample(1:nrow(aucrf_data_LRlumen),nrow(aucrf_data_LRlumen),replace=F)
cv10f_probs_lum <- rep(NA,39)
for(i in seq(1,36,4)){
train_lum <- aucrf_data_LRlumen[sampling_lum[-(i:(i+3))],]
test_lum <- aucrf_data_LRlumen[sampling_lum[i:(i+3)],]
set.seed(seed)
temp_model_lum <- AUCRF(location~., data=train_lum, pdel=0.99, ntree=500)
cv10f_probs_lum[sampling_lum[i:(i+3)]] <- predict(temp_model_lum$RFopt, test_lum, type='prob')[,2]
}
cv10f_roc_lum <- roc(aucrf_data_LRlumen$location~cv10f_probs_lum)
cv10f_all_pred_lum <- c(cv10f_all_pred_lum, cv10f_probs_lum)
cv10f_all_resp_lum <- c(cv10f_all_resp_lum, aucrf_data_LRlumen$location)
cv10f_aucs_lum[j] <- cv10f_roc_lum$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc_lum <- roc(cv10f_all_resp_lum~cv10f_all_pred_lum)
subsampled_meta <- merge(meta_file, subsample, by.x='group', by.y='row.names')
fuso179 <- subsampled_meta[, colnames(subsampled_meta) %in% c("group", "patient", "location", "Otu00179")]
fuso179[,5] <- (fuso179[,4]/subsampled_to)*100
View(fuso179)
subsample <- read.table(file='../data/mothur/kws_final.an.0.03.subsample.shared', header=T)
source('../code/Sum_OTU_by_Tax.R')
source('../code/sum_shared.R')
#use this code to assign phyla to each OTU in the shared file
shared_phyla <- get_tax_level_shared(subsample, tax, 2)
meta <- '../data/raw/kws_metadata.tsv'
shared <- '../data/mothur/kws_final.an.shared'
tax <- '../data/mothur/kws_final.an.cons.taxonomy'
subsample <- read.table(file='../data/mothur/kws_final.an.0.03.subsample.shared', header=T)
meta_file <- read.table(file='../data/raw/kws_metadata.tsv', header = T)
shared_file <- read.table(file='../data/mothur/kws_final.an.shared', sep = '\t', header=T, row.names=2)
tax_file <- read.table(file='../data/mothur/kws_final.an.cons.taxonomy', sep = '\t', header=T, row.names=1)
shared_meta <- merge(meta_file, shared_file, by.x='group', by.y='row.names')
simps <- read.table(file='../data/mothur/kws_final.an.groups.summary', header = T)
simpmeta <- merge(meta_file, simps)
tyc <- read.table(file ="../data/mothur/kws_final.an.summary", sep = '\t', header = T, row.names=NULL)
LRlumen_otu_feat <- colnames(aucrf_data_LRlumen[2:6])
otu_taxa_LRlumen <- get_tax(1, LRlumen_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
lsrs_abunds <- shared_meta[shared_meta$location=='LS', LRlumen_otu_feat]/10000 + 1e-4
rsls_abunds <- shared_meta[shared_meta$location=='RS', LRlumen_otu_feat]/10000 + 1e-4
par(mar=c(5, 15, 1, 1))
plot(1, type="n", ylim=c(0,length(LRlumen_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n", cex.lab=1.5)
index <- 1
for(i in LRlumen_otu_feat){
stripchart(at=index-0.35, jitter(lsrs_abunds[,i], amount=1e-5), pch=21, bg="brown", method="jitter", jitter=0.2, add=T, cex=1.2, lwd=0.5)
stripchart(at=index+0.35, jitter(rsls_abunds[,i], amount=1e-5), pch=21, bg="magenta", method="jitter", jitter=0.2, add=T, cex=1.2, lwd=0.5)
segments(median(lsrs_abunds[,i]),index-0.7,median(lsrs_abunds[,i]),index, lwd=3)
segments(median(rsls_abunds[,i]),index+0.7,median(rsls_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_LRlumen$tax_label, las=1, line=-0.5, tick=F, cex.axis=1.2)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"), cex.axis=1.2)
legend('topright', legend=c("Left lumen", "Right lumen"), pch=c(21, 21), pt.bg=c("brown","magenta"), cex=1.2)
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='', cex.axis=1.5)
plot(cv10f_roc_right_bs, col='blue', lwd=3, add=T, lty=1)
plot(cv10f_roc_left_bs, col = 'red', lwd=3, add=T, lty=1)
mtext(side=2, text="True Positive (Sensitivity)", line=2.5, cex=1.5)
mtext(side=1, text="True Negative (Specificity)", line=2.5, cex=1.5)
legend('bottom', legend=c(
sprintf('L Lumen vs L Mucosa, 10-fold CV, AUC =0.980'),
sprintf('R Lumen vs R Mucosa, 10-fold CV, AUC = 0.797')
),lty=c(1, 1, 1), lwd=3, col=c('red', 'blue'), bty='n', cex=1.2)
#just LB vs LS
left_otu_feat <- colnames(aucrf_data_left_bs[2:6])
otu_taxa_left <- get_tax(1, left_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
ls_abunds <- shared_meta[shared_meta$location=='LS', left_otu_feat]/10000 + 1e-4
lb_abunds <- shared_meta[shared_meta$location=='LB', left_otu_feat]/10000 + 1e-4
right_otu_feat <- colnames(aucrf_data_right_bs[2:6])
otu_taxa_right <- get_tax(1, right_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
rs_abunds <- shared_meta[shared_meta$location=='RS', right_otu_feat]/10000 + 1e-4
rb_abunds <- shared_meta[shared_meta$location=='RB', right_otu_feat]/10000 + 1e-4
cv10f_roc_left_bs
cv10f_roc_left_bs$auc
