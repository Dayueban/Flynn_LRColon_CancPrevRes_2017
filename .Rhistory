rf_all <- randomize_site(rel_meta, samp1="mucosa", samp2="stool")
randomize_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, site %in% c(samp1, samp2))
subsetted$site <- factor(subsetted$site)
rf_out <- randomForest(site ~ ., data = select(subsetted, site, contains("Otu")), importance = T, ntree=n_trees)
}
rf_all <- randomize_site(rel_meta, samp1="mucosa", samp2="stool")
rf_exitlum <- randomize_site(rel_meta, "stool", "exit")
rf_exitmuc <- randomize_site(rel_meta, "mucosa", "exit")
rf_exitRlum <- randomize_loc(rel_meta, "RS", "SS")
rf_exitLlum <- randomize_loc(rel_meta, "LS", "SS")
randomize_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
rf_out <- randomForest(location ~ ., data = select(subsetted, location, contains("Otu")), importance = T, ntree=n_trees)
}
rf_exitRlum <- randomize_loc(rel_meta, "RS", "SS")
rf_exitLlum <- randomize_loc(rel_meta, "LS", "SS")
rf_exitRlum <- randomize_loc(rel_meta, "RS", "SS")
rf_exitLlum <- randomize_loc(rel_meta, "LS", "SS")
randomize_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
rf_out <- randomForest(location ~ ., data = select(subsetted, location, contains("Otu")), importance = T, ntree=n_trees)
}
rf_exitRlum <- randomize_loc(rel_meta, "RS", "SS")
rf_exitLlum <- randomize_loc(rel_meta, "LS", "SS")
randomize_loc(rel_meta, "RS", "SS")
shared_file <- read.table(file='data/mothur/kws_final.an.shared', sep = '\t', header=T, row.names=2)
shared_file <- subset(shared_file, select = -c(numOtus, label))
auc_loc <- function(subsetted, seed, n_trees){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
#also should store this data somewhere. maybe as unique values or within a list?
}
auc_loc <- function(subsetted, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
#also should store this data somewhere. maybe as unique values or within a list?
}
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
#also should store this data somewhere. maybe as unique values or within a list?
}
#generate AUCRF model for 2 sites
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_left_aucrf <- AUCRF(location ~ ., data = select(left_bs, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
levels(left_bs$location) <- c(1:length(levels(left_bs$location))-1) # convert levels to numeric based on number of levels
rf_left_aucrf <- AUCRF(location ~ ., data = select(left_bs, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
rf_left_aucrf_test <- auc_loc(rel_meta, "LB", "LS")
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_aucrf)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_left_aucrf_test <- auc_loc(rel_meta, "LB", "LS")
rf_LRbowel_aucrf <- auc_loc(rel_meta, "LB", "RB")
rf_right_aucrf <- auc_loc(rel_meta, "RB", "RS")
rf_LRlumen_aucrf <- auc_loc(rel_meta, "LS", "RS")
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_aucrf)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_all_aucrf <- auc_site(rel_meta, "mucosa", "stool")
generate AUCRF model for 2 sites
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, site %in% c(samp1, samp2))
subsetted$site <- factor(subsetted$site)
#change levels of variable of interest to 0/1
levels(subsetted$site) <- c(1:length(levels(subsetted$site))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(site ~ ., data = select(subsetted, site, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$site, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_aucrf)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_all_aucrf <- auc_site(rel_meta, "mucosa", "stool")
rf_exitlum_aucrf <- auc_site(rel_meta, "stool", "exit")
rf_exitLlum_aucrf <- auc_loc(rel_meta, "LB", "SS")
rf_exitRlum_aucrf <- auc_loc(rel_meta, "RB", "SS")
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(otu_feat)
#also should store this data somewhere. maybe as unique values or within a list?
}
#generate AUCRF model for 2 sites
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, site %in% c(samp1, samp2))
subsetted$site <- factor(subsetted$site)
#change levels of variable of interest to 0/1
levels(subsetted$site) <- c(1:length(levels(subsetted$site))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(site ~ ., data = select(subsetted, site, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$site, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(otu_feat)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_exitRlum_aucrf <- auc_loc(rel_meta, "RB", "SS")
otu_exitRlum_probs <- predict(rf_exitRlum_aucrf$RFopt, type ='prob')
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_acurf)
#also should store this data somewhere. maybe as unique values or within a list?
}
#generate AUCRF model for 2 sites
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, site %in% c(samp1, samp2))
subsetted$site <- factor(subsetted$site)
#change levels of variable of interest to 0/1
levels(subsetted$site) <- c(1:length(levels(subsetted$site))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(site ~ ., data = select(subsetted, site, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$site, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_aucrf)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_left_aucrf <- auc_loc(rel_meta, "LB", "LS")
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
return(rf_aucrf)
#also should store this data somewhere. maybe as unique values or within a list?
}
otu_left_probs <- predict(rf_left_aucrf$RFopt, type = 'prob')
otu_left_roc <- roc(left_bs$location ~ otu_left_probs[ , 2])
left_otu_feat <- rf_left_aucrf$Xopt
aucrf_data_left_bs <- left_bs[, c('location', left_otu_feat)]
View(aucrf_data_left_bs)
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
aucrf_data <- subsetted[, c('location', otu_feat)]
return(aucrf_data)
#also should store this data somewhere. maybe as unique values or within a list?
}
rf_left_aucrf1 <- auc_loc(rel_meta, "LB", "LS")
View(rf_left_aucrf1)
auc_loc <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, location %in% c(samp1, samp2))
subsetted$location <- factor(subsetted$location)
#change levels of variable of interest to 0/1
levels(subsetted$location) <- c(1:length(levels(subsetted$location))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(location ~ ., data = select(subsetted, location, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$location, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
aucrf_data <- subsetted[, c('location', otu_feat)]
return(aucrf_data)
#also should store this data somewhere. maybe as unique values or within a list?
}
#generate AUCRF model for 2 sites
auc_site <- function(yourdata, samp1, samp2){
subsetted <- subset(yourdata, site %in% c(samp1, samp2))
subsetted$site <- factor(subsetted$site)
#change levels of variable of interest to 0/1
levels(subsetted$site) <- c(1:length(levels(subsetted$site))-1)
# create RF model
set.seed(seed)
rf_aucrf <- AUCRF(site ~ ., data = select(subsetted, site, contains("Otu")),
ntree = n_trees, pdel = 0.05, ranking = 'MDA')
otu_probs <- predict(rf_aucrf$RFopt, type = 'prob') #pull out predictive OTUs
all_probs <- data.frame(obs = subsetted$site, pred = otu_probs[,2])
#compare real with predicted with ROC
otu_roc <- roc(subsetted$location ~ otu_probs[,2])
otu_feat <- rf_aucrf$Xopt
aucrf_data <- subsetted[, c('site', otu_feat)]
return(aucrf_data)
#also should store this data somewhere. maybe as unique values or within a list?
}
aucrf_data_left_bs <- auc_loc(rel_meta, "LB", "LS")
aucrf_data_LRbowel <- auc_loc(rel_meta, "LB", "RB")
aucrf_data_right_bs <- auc_loc(rel_meta, "RB", "RS")
aucrf_data_LRlumen <- auc_loc(rel_meta, "LS", "RS")
aucrf_data_allum <- auc_site(rel_meta, "mucosa", "stool")
iters <- 100
cv10f_aucs <- c()
cv10f_all_resp <- c()
cv10f_all_pred <- c()
for(j in 1:iters){
set.seed(j)
sampling <- sample(1:nrow(aucrf_data_allum),nrow(aucrf_data_allum),replace=F)
cv10f_probs <- rep(NA,78)
for(i in seq(1,77,7)){
train <- aucrf_data_allum[sampling[-(i:(i+6))],]
test <- aucrf_data_allum[sampling[i:(i+6)],]
set.seed(seed)
temp_model <- AUCRF(site~., data=train, pdel=0.99, ntree=500)
cv10f_probs[sampling[i:(i+6)]] <- predict(temp_model$RFopt, test, type='prob')[,2]
}
cv10f_roc <- roc(aucrf_data_allum$site~cv10f_probs)
cv10f_all_pred <- c(cv10f_all_pred, cv10f_probs)
cv10f_all_resp <- c(cv10f_all_resp, aucrf_data_allum$site)
cv10f_aucs[j] <- cv10f_roc$auc #stores aucs for all iterations, can use to calc IQR
}
cv10f_roc <- roc(cv10f_all_resp~cv10f_all_pred)
#Lumen vs mucosa plot
par(mar=c(4,4,1,1))
plot(c(1,0),c(0,1), type='l', lty=3, xlim=c(1.01,0), ylim=c(-0.01,1.01), xaxs='i', yaxs='i', ylab='', xlab='')
#plot(cv10f_roc_right_bs, col='blue', lwd=2, add=T, lty=1)
plot(cv10f_roc, col = 'purple', lwd=2, add=T, lty=1)
#plot(cv10f_roc_left_bs, col = 'red', lwd=2, add=T, lty=1)
mtext(side=2, text="True Positive (Sensitivity)", line=2.5)
mtext(side=1, text="True Negative (Specificity)", line=2.5)
legend('bottom', legend=c(sprintf('Lumen vs Mucosa, 10-fold CV, AUC = 0.925'),
sprintf('L Lumen vs L Mucosa, 10-fold CV, AUC =0.980'),
sprintf('R Lumen vs R Mucosa, 10-fold CV, AUC = 0.797')
#sprintf('OOB vs Leave-1-out: p=%.2g', roc.test(otu_euth_roc,LOO_roc)$p.value),
#sprintf('OOB vs 10-fold CV: p=%.2g', roc.test(otu_euth_roc,cv10f_roc)$p.value)
),lty=c(1, 1, 1), lwd=2, col=c('purple','red', 'blue'), bty='n')
rf_left <- randomize_loc(rel_meta, "LB", "LS") #OOB 10.26%
importance_sorted_rfleft <- sort(importance(rf_left)[,1], decreasing = T)
top_important_OTU_rfleft <- data.frame(head(importance_sorted_rfleft, n_features))
colnames(top_important_OTU_rfleft) <- 'Importance'
top_important_OTU_rfleft$OTU <- rownames(top_important_OTU_rfleft)
otu_taxa_rfleft <- get_tax(1, top_important_OTU_rfleft$OTU, tax_file)
n_features <- 10
top_important_OTU_rfleft <- data.frame(head(importance_sorted_rfleft, n_features))
colnames(top_important_OTU_rfleft) <- 'Importance'
top_important_OTU_rfleft$OTU <- rownames(top_important_OTU_rfleft)
otu_taxa_rfleft <- get_tax(1, top_important_OTU_rfleft$OTU, tax_file)
#importance_plot_day_rfleft <-
ggplot(data = top_important_OTU_rfleft, aes(x = factor(OTU), y = Importance)) +
geom_point() + scale_x_discrete(limits = rev(top_important_OTU_rfleft$OTU),
labels = rev(paste(otu_taxa_rfleft[,1],' (',
rownames(otu_taxa_rfleft),')',
sep=''))) +
labs(x= '', y = '% Increase in MSE') + theme_bw() + coord_flip() + ggtitle('LB vs LS')
importance_sorted_rfright <- sort(importance(rf_right)[,1], decreasing = T)
top_important_OTU_rfright <- data.frame(head(importance_sorted_rfright, n_features))
colnames(top_important_OTU_rfright) <- 'Importance'
top_important_OTU_rfright$OTU <- rownames(top_important_OTU_rfright)
otu_taxa_rfright <- get_tax(1, top_important_OTU_rfright$OTU, tax_file)
#importance_plot_day_rfleft <-
ggplot(data = top_important_OTU_rfright, aes(x = factor(OTU), y = Importance)) +
geom_point() + scale_x_discrete(limits = rev(top_important_OTU_rfright$OTU),
labels = rev(paste(otu_taxa_rfright[,1],' (',
rownames(otu_taxa_rfright),')',
sep=''))) +
labs(x= '', y = '% Increase in MSE') + theme_bw() + coord_flip() + ggtitle('RB vs RS')
par(mar=c(4, 9, 1, 1))
plot(1, type="n", ylim=c(0,length(all_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in all_otu_feat){
stripchart(at=index-0.35, jitter(lumen_abunds[,i], amount=1e-5), pch=21, bg="royalblue1", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(mucosa_abunds[,i], amount=1e-5), pch=21, bg="orange", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(lumen_abunds[,i]),index-0.7,mean(lumen_abunds[,i]),index, lwd=3)
segments(mean(mucosa_abunds[,i]),index+0.7,mean(mucosa_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_all$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("mucosa", "lumen"), pch=c(21, 21), pt.bg=c("orange","royalblue1"), cex=0.7)
all_otu_feat <- rev(all_otu_feat[1:5])
otu_taxa_all <- get_tax(1, all_otu_feat, tax_file)
View(aucrf_data_left_bs)
?rev
all_otu_feat <- colnames(aucrf_data_allum[2:ncol(aucrf_data_allum)])
all_otu_feat
otu_taxa_all <- get_tax(1, all_otu_feat, tax_file)
lumen_abunds <- shared_meta[shared_meta$site=='stool', all_otu_feat]/10000 + 1e-4
mucosa_abunds <- shared_meta[shared_meta$site=='mucosa', all_otu_feat]/10000 + 1e-4
par(mar=c(4, 9, 1, 1))
plot(1, type="n", ylim=c(0,length(all_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in all_otu_feat){
stripchart(at=index-0.35, jitter(lumen_abunds[,i], amount=1e-5), pch=21, bg="royalblue1", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(mucosa_abunds[,i], amount=1e-5), pch=21, bg="orange", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(lumen_abunds[,i]),index-0.7,mean(lumen_abunds[,i]),index, lwd=3)
segments(mean(mucosa_abunds[,i]),index+0.7,mean(mucosa_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_all$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("mucosa", "lumen"), pch=c(21, 21), pt.bg=c("orange","royalblue1"), cex=0.7)
lumen_abunds <- shared_meta[shared_meta$site=='stool', all_otu_feat]/10000 + 1e-4
mucosa_abunds <- shared_meta[shared_meta$site=='mucosa', all_otu_feat]/10000 + 1e-4
par(mar=c(4, 9, 1, 1))
plot(1, type="n", ylim=c(0,length(all_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in all_otu_feat){
stripchart(at=index-0.35, jitter(lumen_abunds[,i], amount=1e-5), pch=21, bg="royalblue1", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(mucosa_abunds[,i], amount=1e-5), pch=21, bg="orange", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(lumen_abunds[,i]),index-0.7,mean(lumen_abunds[,i]),index, lwd=3)
segments(mean(mucosa_abunds[,i]),index+0.7,mean(mucosa_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_all$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("mucosa", "lumen"), pch=c(21, 21), pt.bg=c("orange","royalblue1"), cex=0.7)
left_otu_feat <- colnames(aucrf_data_left_bs[2:6])
otu_taxa_left <- get_tax(1, left_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
ls_abunds <- shared_meta[shared_meta$location=='LS', left_otu_feat]/10000 + 1e-4
lb_abunds <- shared_meta[shared_meta$location=='LB', left_otu_feat]/10000 + 1e-4
par(mar=c(4, 9, 1, 1))
plot(1, type="n", ylim=c(0,length(left_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in left_otu_feat){
stripchart(at=index-0.35, jitter(ls_abunds[,i], amount=1e-5), pch=21, bg="lightblue", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(lb_abunds[,i], amount=1e-5), pch=21, bg="yellow", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(ls_abunds[,i]),index-0.7,mean(ls_abunds[,i]),index, lwd=3)
segments(mean(lb_abunds[,i]),index+0.7,mean(lb_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_left$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("left mucosa", "left lumen"), pch=c(21, 21), pt.bg=c("yellow","lightblue"), cex=1)
right_otu_feat <- colnames(aucrf_data_right_bs[2:6])
otu_taxa_right <- get_tax(1, right_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
rs_abunds <- shared_meta[shared_meta$location=='RS', right_otu_feat]/10000 + 1e-4
rb_abunds <- shared_meta[shared_meta$location=='RB', right_otu_feat]/10000 + 1e-4
par(mar=c(4, 10, 1, 1))
plot(1, type="n", ylim=c(0,length(right_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in right_otu_feat){
stripchart(at=index-0.35, jitter(rs_abunds[,i], amount=1e-5), pch=21, bg="purple", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(rb_abunds[,i], amount=1e-5), pch=21, bg="orange", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(rs_abunds[,i]),index-0.7,mean(rs_abunds[,i]),index, lwd=3)
segments(mean(rb_abunds[,i]),index+0.7,mean(rb_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_right$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("right mucosa", "right lumen"), pch=c(21, 21), pt.bg=c("orange","purple"), cex=1)
LRbowel_otu_feat <- colnames(aucrf_data_LRbowel[2:6])
otu_taxa_LRbowel <- get_tax(1, LRbowel_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
lb_abunds <- shared_meta[shared_meta$location=='LB', LRbowel_otu_feat]/10000 + 1e-4
rblb_abunds <- shared_meta[shared_meta$location=='RB', LRbowel_otu_feat]/10000 + 1e-4
par(mar=c(4, 10, 1, 1))
plot(1, type="n", ylim=c(0,length(LRbowel_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in LRbowel_otu_feat){
stripchart(at=index-0.35, jitter(lb_abunds[,i], amount=1e-5), pch=21, bg="darkgreen", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(rblb_abunds[,i], amount=1e-5), pch=21, bg="pink", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(lb_abunds[,i]),index-0.7,mean(lb_abunds[,i]),index, lwd=3)
segments(mean(rblb_abunds[,i]),index+0.7,mean(rblb_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_LRbowel$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("left mucosa", "right mucosa"), pch=c(21, 21), pt.bg=c("darkgreen","pink"), cex=1)
LRlumen_otu_feat <- colnames(aucrf_data_LRlumen[2:6])
otu_taxa_LRlumen <- get_tax(1, LRlumen_otu_feat, tax_file)
#Abundance stripchart or most predictive otus
lsrs_abunds <- shared_meta[shared_meta$location=='LS', LRlumen_otu_feat]/10000 + 1e-4
rsls_abunds <- shared_meta[shared_meta$location=='RS', LRlumen_otu_feat]/10000 + 1e-4
par(mar=c(4, 10, 1, 1))
plot(1, type="n", ylim=c(0,length(LRlumen_otu_feat)*2), xlim=c(1e-4,3), log="x", ylab="", xlab="Relative Abundance (%)", xaxt="n", yaxt="n")
index <- 1
for(i in LRlumen_otu_feat){
stripchart(at=index-0.35, jitter(lsrs_abunds[,i], amount=1e-5), pch=21, bg="brown", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
stripchart(at=index+0.35, jitter(rsls_abunds[,i], amount=1e-5), pch=21, bg="magenta", method="jitter", jitter=0.2, add=T, cex=1, lwd=0.5)
segments(mean(lsrs_abunds[,i]),index-0.7,mean(lsrs_abunds[,i]),index, lwd=3)
segments(mean(rsls_abunds[,i]),index+0.7,mean(rsls_abunds[,i]),index, lwd=3)
index <- index + 2
}
axis(2, at=seq(1,index-2,2), labels=otu_taxa_LRlumen$tax_label, las=1, line=-0.5, tick=F, cex.axis=0.8)
axis(1, at=c(1e-4, 1e-3, 1e-2, 1e-1, 1), label=c("0", "0.1", "1", "10", "100"))
legend('topright', legend=c("left lumen", "right lumen"), pch=c(21, 21), pt.bg=c("brown","magenta"), cex=1)
stat_summary
library("Hmisc")
install.packages(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
Sys.getenv("R_LIBS_USER")
